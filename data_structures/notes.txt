## Data Structures
* a way to store and organize data so that it can be used efficiently
* mathematical / logical models

### Abstract Data Type ADT
- define operations/data but no implementation

# Lists
---
### ADT
  * empty list has size 0
  * insert
  * removed
  * count
  * read/modify element in any position
  * specify data-type

# Linked List
---
  * requires memory for one data at a time
  * nodes are created only when needed
  * higher probability for different memory location for each request.
  * link blocks through index assignment
  * 1/2 of the block is the data
  * 1/2 is the memory location of the next data block
  * 4bytes for integer var and 4bytes for the pointer variable
  * to access element in linked-list you should start with the head node
  * last node has no pointer variable //null
  * similar to playing treasure hunt

# Array VS Linked-list
Point of comparison || Array || Linked-list
1. Accessing an element || O(1)|| O(n)
2. Memory Requirement || Fixed Size || No unused memory but has extra memory for the pointer variable
3. Memory availability || Not always available as one large block || Available for multiple small nodes
4. Insert/Delete at beginning || Shift all elements from beginning O(n) || Create new node and create pointer to head node O(1)
5. Insert/Delete at end || add to higher index if array is not full O(1) else O(n) || traverse through the whole list O(n)
6. Insert/Delete at middle || shift half O(n) || traverse to that point then shift O(n)
7. Ease of use || True || False

# Doubly Linked-List
---
  * creates pointers for both prev and next node
    1. Advantages
      * forward and reverse lookup
    2. Disadvantage
      * uses more memory 12 bytes per node
      * more prone to errors

# Stacks
---
### Stack ADT
  * First in Last out
  * items are removed from top
  * list restricted to insertion and deletion at the top
  1. Operations || O(1) all constant time
    * Push - insert element to top
    * Pop  -remove top element
    * Top - return element at top index
    * IsEmpty - return bool if stack does not contain anything
  2. Applications
    * function calls/recursion
    * implement undo operation like in text-editors
    * balanced parentheses

## Uses of stack
  * to reverse a string
  * pop() then store to new stack

## Check for balanced parentheses using stack
  * first check if opening.length === closing.length //eliminate half
  * second check if every opening has a closing counterpart to its right and every closing has an opening counterpart to its left
  * third any closer should be for the last unclosed opening









*
